_ = require('lodash')

export ometa OData2AbstractSQL {

	Process :method =
		:path
		end
		(	?_.isEmpty(path)
			-> []
		|	?(path.resource == '$metadata')
			-> ['$metadata']
		|	PathSegment(method, path):queryParts
			{queryParts.query}:query
			{query.push(['Select', queryParts.select])}
			{queryParts.where}:where
			{	_.each(queryParts.froms, function(tableName) {
					query.push(['From', tableName]);
				})
			}
			(	?where.length
				(	?(where.length > 1)
					-> query.push(['Where', ['And'].concat(where)])
				|	-> query.push(['Where'].concat(where))
				)
			)?
			(	?(method == 'GET')
				-> ['SelectQuery'].concat(query)
			|	?(method == 'PUT')
				-> ['UpsertQuery'].concat(query)
			|	?(method == 'POST')
				-> ['InsertQuery'].concat(query)
			|	?(method == 'DELETE')
				-> ['DeleteQuery'].concat(query)
			)
		)
	,
	PathSegment :method :path =
		?path.resource
		Resource(path.resource):resource
		{[]}:query
		{[]}:select
		{[resource.tableName]}:froms
		{[]}:where
		(	?path.property
			PathSegment(method, path.property):childQuery
			{query.concat(childQuery.query)}:query
			{select.concat(childQuery.select)}:select
			{froms.concat(childQuery.froms)}:froms
			{where.concat(childQuery.where)}:where

			(	?path.property.resource
			|	{throw 'PathSegment has a property without a resource?'}
			)
			Resource(path.property.resource):propertyResource
			NavigateResources(resource, propertyResource):navigationWhere
			-> where.push(navigationWhere)
		|	?path.link
			(	?path.link.resource
			|	{throw 'PathSegment has a link without a resource?'}
			)
			Resource(path.link.resource):linkResource
			(	FieldContainedIn(linkResource.tableName, resource.fields)
				-> ['ReferencedField', resource.tableName, linkResource.tableName]
			|	FieldContainedIn(resource.tableName, linkResource.fields)
				-> ['ReferencedField', linkResource.tableName, resource.tableName]
			|	{throw 'Cannot navigate links'}
			):referencedField
			(	?path.link.key
				-> where.push(['Equals', referencedField, ['Number', path.key]])
			)?
			-> select.push(referencedField)
		|	?(method == 'PUT' || method == 'POST')
			Fields(resource.tableName, resource.fields):fields
			-> query.push(['Fields', fields])
		|	?path.options
			?path.options.$select
			AddExtraFroms(path.options.$select.properties, froms, where, resource)
			Properties(path.options.$select.properties):fields
			{select.concat(fields)}:select
		|	(	?path.options
				?path.options.$expand
				Expands(method, resource, select, froms, where, path.options.$expand.properties)
			)?
			-> select.push([resource.tableName, '*'])
		)

		(	?(!path.options)
		|	(	?(!path.options.$filter)
			|	AddExtraFroms(path.options.$filter, froms, where, resource)
				Boolean(path.options.$filter):filter
				-> where.push(filter)
			)
			(	?(!path.options.$orderby)
			|	AddExtraFroms(path.options.$orderby.properties, froms, where, resource)
				OrderBy(path.options.$orderby.properties):orderby
				-> query.push(['OrderBy'].concat(orderby))
			)
			(	?(!path.options.$top)
			|	Number(path.options.$top):limit
				-> query.push(['Limit', limit])
			)
			(	?(!path.options.$skip)
			|	Number(path.options.$skip):offset
				-> query.push(['Offset', offset])
			)
		)

		(	?path.key
			-> where.push(['Equals', ['ReferencedField', resource.tableName, resource.idField], ['Number', path.key]])
		)?

		-> { query: query, select: select, froms: froms, where: where }
	,

	OrderBy =
		[	(	:ordering
				Property(ordering):field
				-> [ordering.order.toUpperCase(), field]
			)+:orderby
		]
		-> orderby
	,

	Fields :tableName =
		[	(	:field
				-> [field.fieldName,['Bind', tableName, field.fieldName]]
			)*:fields
		]
		-> fields
	,

	Resource :resourceName =
			{this.clientModel.resources[resourceName]}:resource
			?resource
			(	?resource.tableName
			|	ResourceMapping(resourceName):resourceMapping
				{resource.tableName = resourceMapping._name}
			)
			-> resource
		|	{throw 'Unknown resource: ' + resourceName}
	,

	FieldContainedIn :fieldName =
		{false}:contained
		[	(	:field
				(	?(field.fieldName == fieldName)
					{true}:contained
				)?
			)*
		]
		?contained
	,

	ResourceMapping :resourceName =
			?this.clientModel.resourceToSQLMappings[resourceName]
			-> this.clientModel.resourceToSQLMappings[resourceName]
		|	{throw 'Unknown resource: ' + resourceName}
	,

	Boolean =
			[	(	'eq'
					-> 'Equals'
				|	'ne'
					-> 'NotEquals'
				|	'gt'
					-> 'GreaterThan'
				|	'ge'
					-> 'GreaterThanOrEqual'
				|	'lt'
					-> 'LessThan'
				|	'le'
					-> 'LessThanOrEqual'
				):operation
				Operand:op1
				Operand:op2
			|	(	'and'
					-> 'And'
				|	'or'
					-> 'Or'
				):operation
				Boolean:op1
				Boolean:op2
			]
			-> [operation, op1, op2]
		|	[	'not'
				Boolean:bool
			]
			-> ['Not', bool]
		|	Property
		|	BooleanFunction
	,

	BooleanFunction =
			Function('substringof')
		|	Function('startswith')
		|	Function('endswith')
	,

	NumberFunction =
			Function('length')
		|	Function('indexof')
		|	Function('round')
		|	Function('floor')
		|	Function('ceiling')
	,

	TextFunction =
			Function('replace')
		|	Function('substring')
		|	Function('tolower')
		|	Function('toupper')
		|	Function('trim')
		|	Function('concat')
	,

	Function :name =
		[	'call'
			:properties
			?(properties.method == name)
			Arguments(properties.args):args
		]
		-> [name].concat(args)
	,

	Arguments =
		[	Operand*:args
		]
		-> args
	,

	Operand =
			Boolean
		|	Number
		|	Text
		|	Math
	,

	Math =
		[	(	'add'
				-> 'Add'
			|	'sub'
				-> 'Subtract'
			|	'mul'
				-> 'Multiply'
			|	'div'
				-> 'Divide'
			):operation
			Operand:op1
			Operand:op2
		]
		-> [operation, op1, op2]
	,

	Properties =
		[	Property*:props
		]
		-> props
	,

	Property =
		:prop
		?prop.name
		(	?prop.property
			(	?prop.property.name
				(	?prop.property.property
					Property(prop.property)
				|	Resource(prop.name):resource
					-> ['ReferencedField', resource.tableName, prop.property.name]
				)
			|	{console.error(prop)}
				{throw 'Subproperty without a name'}
			)
		|	-> ['Field', prop.name]
		)
	,

	Number =
			number:num
			-> ['Number', num]
		|	NumberFunction
	,

	Text =
			string:text
			-> ['Text', text]
		|	TextFunction
	,

	Expands :method :resource :select :froms :where =
		[	(	:expand
				Resource(expand.name):extraResource
				AddNavigation(froms, where, resource, extraResource)
				{select.push([expand.name, '*'])}
			)*
		]
	,

	NavigateResources :resource1 :resource2 =
			FieldContainedIn(resource1.tableName, resource2.fields)
			-> ['Equals',
				['ReferencedField', resource1.tableName, resource1.idField],
				['ReferencedField', resource2.tableName, resource1.tableName]
			]
		|	FieldContainedIn(resource2.tableName, resource1.fields)
			-> ['Equals',
				['ReferencedField', resource2.tableName, resource2.idField],
				['ReferencedField', resource1.tableName, resource2.tableName]
			]
		|	{throw 'Cannot navigate resources'}
	,

	AddExtraFroms :searchPoint :froms :where :resource =
		ExtraFroms(searchPoint):extraFroms
		{	_.each(extraFroms, function(resourceName) {
				var currentResource = resource;
				if(_.isArray(resourceName)) {
					_.each(resourceName, function(resourceName) {
						var extraResource = this.Resource(resourceName);
						this.AddNavigation(froms, where, currentResource, extraResource);
						currentResource = extraResource;
					}, this);
				}
				else {
					var extraResource = this.Resource(resourceName);
					this.AddNavigation(froms, where, currentResource, extraResource);
				}
			}, this);
		}
	,

	// Returns the resource names.
	ExtraFroms =
		{[]}:froms
		?(_.isArray(this.input.hd))
		[	(	:nextProp
				(	{nextProp}:prop
					?prop.name
					?prop.property
					?prop.property.name
					{prop.property}:nextProp
					-> prop.name
				)+:extraFroms
				(	?(extraFroms.length == 1)
					-> froms.push(extraFroms[0])
				|	-> froms.push(extraFroms)
				)
			|	ExtraFroms:extraFroms
				{froms.concat(extraFroms)}:froms
			|	anything
			)*
		]
		-> froms
	,

	AddNavigation :froms :where :resource :extraResource =
		(	?(!_.contains(froms, extraResource.tableName))
			NavigateResources(resource, extraResource):nagivationWhere
			{froms.push(extraResource.tableName)}
			{where.push(nagivationWhere)}
		)?
}